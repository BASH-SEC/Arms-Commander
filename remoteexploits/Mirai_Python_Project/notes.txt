# Analysis and Reverse-Engineering of a Pythonic Mirai Botnet

This is the Python Conversion effort of the Mirai Botnet Source Code
By Chang Tan Lister

This document details the discoveries and conclusions drawn by the dev as he analyzes the source code of the Mirai botnet.
6:25 am, PST

Discovered that the Mirai source code (originally in C), appears to carry its own toolkit, including but not limited to...
1. A domain name resolver /media/root/Data/Mirai/mirai/bot/resolv.c
2. A random number and random string generator /media/root/Data/Mirai/mirai/bot/rand.c
3. A homebrew utilities kit /media/root/Data/Mirai/mirai/bot/util.c
4. A integrated scanner (that is added to the malware after it is compiled) /media/root/Data/Mirai/mirai/bot/scanner.c
5. Its own Database Table and Spreadsheet. It uses MySQL natively
6. Command and control procedure, is done through Google Go /media/root/Data/Mirai/mirai/cnc/admin.go
7. Its own debugger
8. Its own crypto-algorithm /media/root/Data/Mirai/mirai/bot/rand.c


# Command and Control is done through Google Go Language
 and the MySQL Server for DEBIAN.

 It stores its parameters into a tables file

 Kali does NOT have a working Google Go Language installation.

 The bot itself is compiled via C language using the GCC compiler

# There are two variants, DEBUG MODE and RELEASE MODE

# DEBUG MODE, if you compile it,
has various safety measures and does not infect anyone.

# RELEASE MODE
is extremely dangerous and it will follow its original programming

It will compile a versrion by itself, a compatible copy for every detected OS
and processor architecture

/media/root/Data/Mirai/mirai/debug/badbot # is the debug version of the malware
/media/root/Data/Mirai/mirai/debug/enc # is some sort of to shellcode encoder
/media/root/Data/Mirai/mirai/build.sh # primary build script to create both debug and release versions

# if you read the source code you will find FREQUENT "if DEBUG" statements
That is the part that will be compiled if set to DEBUG MODE only.
Otherwise if you set it to "build.sh release telnet", it will generate a working
and infectious variant of the Mirai Botnet Malware

For example, line 295 of /media/root/Data/Mirai/mirai/bot/main.c has

>ifdef DEBUG
  >print "[Main] lost connection with CNC"
>endif
  >teardown_connection

So it is automatically instructed to STOP the attack if compiled in DEBUG MODE

the portions that are endif, is the same thing as "else" in Python.
THese are the alternative parts that will be compiled by build.sh if you instruct it to build a release completely
