import os
import socket
import StringIO
import sys
import operator
import toolkits

os.chdir('/root/ArmsCommander/remoteexploits/project_foreplay')
save_file = './saved_login_parameters.txt'

print toolkits.yellow("""
\n
USAGE WARNING:

Please be sure to open up ports 55553 (preferably port range 55550 to 55559)
on your router and/or software firewalls!

Armitage Teamserver, and Metasploit RPC are dependent on...
    1. Port 55553 for the remote login server (listener)
    2. Port 55554 for MSG-RPC
    3. Port 55552 for MSFRPC Daemon
    4. And who knows how many other RPC processes you are already running

For the love of God, do not use your HOME NETWORK for Hacker Team Collaborations!

Go get a upgraded Amazon AWS instance that is DISPOSABLE.
You can control the firewall configurations there by setting "Security Groups" and then reboot the instance.
""")


def launch_teamserver(login_parameters):
    os.chdir('/usr/share/armitage')
    public_ip = login_parameters[0]
    teamserver_password = login_parameters[1]
    print toolkits.green('PRE-FLIGHT: BEGINNING PRE-FLIGHT CHECKS')
    print toolkits.yellow('PRE-FLIGHT: Starting up PostgreSQL server')
    os.system('service postgresql start')
    print toolkits.yellow('PRE-FLIGHT: Starting up Metasploit Service')
    os.system('service metasploit start')
    print toolkits.yellow('PRE-FLIGHT: Initializing Metasploit Database')
    os.system('msfdb init')
    print toolkits.green('LAUNCHING: Starting Metasploit Database')
    os.system('msfdb start')
    print toolkits.yellow('LAUNCHING: Killing all RUBY processes to shut down existing PIDs of msfrpc daemon')
    os.system('killall ruby')
    print toolkits.yellow('LAUNCHING: Killing any processes occupying PORT 55553')
    os.system('fuser -k 55553/tcp')
    print toolkits.green('Starting up Teamserver!')
    cmd_str = """teamserver {0} {1}""".format(
        str(public_ip),
        str(teamserver_password)
    )
    os.system(cmd_str)
    return

def collect_teamserver_creds(save_file):
    os.chdir('/root/ArmsCommander/remoteexploits/project_foreplay')
    login_parameters = [
        str(raw_input(toolkits.yellow("Enter the PUBLIC IP address of your will-be Armitage Teamserver: "))),
        str(raw_input(toolkits.yellow("Enter the PASSWORD you wish to share with your Armitage Teammates: ")))
    ]

    public_ip = login_parameters[0]
    teamserver_password = login_parameters[1]

    login_parameters_str = "{0},{1}".format(
        public_ip,
        teamserver_password
    )
    w = open(save_file,'w')
    w.write(login_parameters_str)
    w.close()

    launch_teamserver(login_parameters)

    return

def load_saved_teamserver_creds(save_file):
    os.chdir('/root/ArmsCommander/remoteexploits/project_foreplay')
    r = open(save_file,'r')
    with open(save_file,'a+') as r:
        line = r.readline()
        sentence = str(line.strip())
        login_parameters = sentence.split(',')
        launch_teamserver(login_parameters)
    return

def main():


    print toolkits.cyan("""
    \n\n\n
    \t\tForeplay, EZ-Mode Armitage Teamserver Collaboration Menu
    \n\t\t\t\tCOMMANDS\n
    LAUNCH - Launch the Armitage Teamserver using NEW CREDENTIALS
    LOAD - Load PREVIOUSLY SAVED CREDENTIALS and launch a teamserver from that
    EXIT - Exit program
    """)

    opt_choice = str(raw_input(toolkits.yellow("Enter a COMMAND: ")))

    if opt_choice == "LAUNCH":
        collect_teamserver_creds(save_file)
        main()
    elif opt_choice == "LOAD":
        load_saved_teamserver_creds(save_file)
        main()
    elif opt_choice == "EXIT":
        print toolkits.red('Received exit command, exiting!')
        exit(0)
    else:
        print toolkits.red('You have entered a invalid option, please try again')
        main()
    return
main()
